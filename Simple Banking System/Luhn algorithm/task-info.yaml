type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    import java.util.Random;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            Account account = new Account(scanner);
            account.logInMenu();
            account.processLogInMenuInput();


        }
    }

    class Account {
        private String pinNumber;
        private String accountNumber;
        private String cardNumber;
        private boolean loggedIn;
        private static final  String issuerIdentificationNumber = "400000";
        private static final int checkSum = 5;
        private Scanner scanner;
        private Random random;
        private int balance;
        public Account(Scanner scanner) {
            this.scanner = scanner;
            loggedIn = false;
        }
        public void createAccount() {
            this.pinNumber = generatePinNumber();
            this.accountNumber = generateAccountNumber();
            this.cardNumber = generateCardNumber();
            this.balance = 0;

        }

        private boolean signIn(String password, String cardNumber){
            return password.equals(this.getPinNumber()) && cardNumber.equals(this.getCardNumber()) ;
        }
        private void printDetailsOnAccountCreation() {
            System.out.println("Your card has been created");
            System.out.println("Your card number:");
            System.out.println(getCardNumber());
            System.out.println("Your card PIN:");
            System.out.println(getPinNumber());
        }
        public void processLogInMenuInput() {
            var userInput = scanner.nextLine();
            int option = Integer.parseInt(userInput);

            switch (option) {
                case 1:
                    createAccount();
                    printDetailsOnAccountCreation();
                    logInMenu();
                    processLogInMenuInput();
                    break;
                case 2:
                    logIn();
                    break;

                case 0:
                    printExitMessage();
                    System.exit(0);
                    break;

            }

        }
        private void logIn(){
            System.out.println("Enter your card number:");
            String card = scanner.nextLine();
            System.out.println("Enter your PIN:");
            String pin = scanner.nextLine();
            boolean signed = signIn(pin, card);
            if (signed) {
                printLoginMessage();
                logOutMenu();
                processLogOutMenuInput();
            }
            else {
                System.out.println("Wrong card number or PIN!");
                logInMenu();
                processLogInMenuInput();
            }
        }

        public void processLogOutMenuInput() {
            var userInput = scanner.nextLine();
            int option = Integer.parseInt(userInput);

            switch (option) {
                case 1:
                    printBalance();
                    logOutMenu();
                    processLogOutMenuInput();
                    break;
                case 2:
                    loggedIn = false;
                    printLogOutMessage();
                    logInMenu();
                    processLogInMenuInput();
                    break;

                case 0:
                    printExitMessage();
                    System.exit(0);
                    break;

            }

        }

        public void logInMenu() {
            System.out.println("1. Create an account");
            System.out.println("2. Log into account");
            System.out.println("0. Exit");
        }
        private void  logOutMenu(){
            System.out.println("1. Balance");
            System.out.println("2. Log out");
            System.out.println("0. Exit");
        }
        private void printBalance(){
            System.out.println("Balance: "+getBalance());
        }
        private void printLogOutMessage() {
            System.out.println("You have successfully logged out!");
        }
        private void printLoginMessage() {
            System.out.println("You have successfully logged in!");
        }
        private void printExitMessage(){
            System.out.println("Bye!");
        }
        public int getBalance() {
            return balance;
        }

        public String getPinNumber() {
            return pinNumber;
        }

        public String getCardNumber() {
            return cardNumber;
        }

        private int[] generatePinArray(){
            int[] pin = new int[4];
            for (int i = 0; i < 4; i++) {
                random = new Random();
                pin[i] = random.nextInt(10);
            }
            return  pin;
        }
        private int[] generateAccountNumberArray() {
            int[] accountNum = new int[9];
            for (int i = 0; i < 9; i++) {
                random = new Random();
                accountNum[i] = random.nextInt(10);
            }
            return accountNum;
        }
        public String generateCardNumber() {
            return issuerIdentificationNumber + this.accountNumber + checkSum;
        }
        private String generateAccountNumber() {
            int[] accountNum = generateAccountNumberArray();
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < accountNum.length; i++) {
                result.append(accountNum[i]);
            }
            return  result.toString();
        }
        public String generatePinNumber() {
            int[] pin = generatePinArray();
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < 4; i++) {
                result.append(pin[i]);
            }
            return  result.toString();
        }



    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import banking.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTestingMethod
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesn’t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
record: 1
